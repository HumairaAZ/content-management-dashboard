{"version":3,"sources":["components/Dashboard.js","App.js","index.js"],"names":["GET_POKEMONS","gql","_templateObject","_taggedTemplateLiteral","Dashboard","loading","error","data","useQuery","searchTerm","setSearchTerm","useState","sortType","setSortType","typeFilter","setTypeFilter","page","setPage","selectedPokemon","setSelectedPokemon","_jsxs","className","children","_jsx","Typography","variant","gutterBottom","Grid","container","spacing","Array","from","map","_","index","item","xs","sm","md","lg","Card","Skeleton","width","height","CardContent","filteredPokemons","pokemons","filter","pokemon","name","toLowerCase","includes","types","sort","a","b","localeCompare","number","paginatedPokemons","slice","TextField","label","fullWidth","margin","onChange","e","target","value","inputProps","FormControl","InputLabel","id","Select","labelId","MenuItem","motion","div","whileHover","scale","onClick","handleOpen","tabIndex","role","concat","CardMedia","component","alt","image","title","color","Pagination","count","Math","ceil","length","event","Modal","open","onClose","handleClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","classification","join","src","App","Router","basename","CssBaseline","Container","Switch","Route","path","exact","client","ApolloClient","uri","cache","InMemoryCache","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","catch","registrationError","ReactDOM","render","ApolloProvider","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b98a093.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Dashboard.css';\nimport { useQuery, gql } from '@apollo/client';\nimport { TextField, Grid, Card, CardContent, Typography, CardMedia, Select, MenuItem, InputLabel, FormControl, Modal, Backdrop, Fade } from '@material-ui/core';\nimport { Pagination, Skeleton } from '@material-ui/lab';\nimport { motion } from 'framer-motion';\n\nconst GET_POKEMONS = gql`\n  {\n    pokemons(first: 151) {\n      id\n      number\n      name\n      image\n      classification\n      types\n    }\n  }\n`;\n\nfunction Dashboard() {\n  const { loading, error, data } = useQuery(GET_POKEMONS);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortType, setSortType] = useState('number');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [selectedPokemon, setSelectedPokemon] = useState(null);\n  const itemsPerPage = 20;\n\n  const handleOpen = (pokemon) => {\n    setSelectedPokemon(pokemon);\n  };\n\n  const handleClose = () => {\n    setSelectedPokemon(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"dashboard\">\n        <Typography variant=\"h4\" gutterBottom>Loading Pokémon...</Typography>\n        <Grid container spacing={3}>\n          {Array.from(new Array(itemsPerPage)).map((_, index) => (\n            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n              <Card>\n                <Skeleton variant=\"rect\" width=\"100%\" height={140} />\n                <CardContent>\n                  <Skeleton variant=\"text\" width=\"60%\" />\n                  <Skeleton variant=\"text\" width=\"40%\" />\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    );\n  }\n\n  if (error) return <p>Error :(</p>;\n\n  const filteredPokemons = data.pokemons\n    .filter(pokemon => pokemon.name.toLowerCase().includes(searchTerm.toLowerCase()) && (!typeFilter || pokemon.types.includes(typeFilter)))\n    .sort((a, b) => {\n      if (sortType === 'name') {\n        return a.name.localeCompare(b.name);\n      }\n      return a.number - b.number;\n    });\n\n  const paginatedPokemons = filteredPokemons.slice((page - 1) * itemsPerPage, page * itemsPerPage);\n\n  return (\n    <div className=\"dashboard\">\n      <Typography variant=\"h4\" gutterBottom>Content Management Dashboard</Typography>\n      <TextField\n        label=\"Search Pokémon\"\n        variant=\"outlined\"\n        fullWidth\n        margin=\"normal\"\n        onChange={e => setSearchTerm(e.target.value)}\n        inputProps={{ 'aria-label': 'search-pokemon' }}\n      />\n      <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n        <InputLabel id=\"sort-label\">Sort By</InputLabel>\n        <Select\n          labelId=\"sort-label\"\n          value={sortType}\n          onChange={e => setSortType(e.target.value)}\n          label=\"Sort By\"\n          inputProps={{ 'aria-label': 'sort-by' }}\n        >\n          <MenuItem value=\"number\">Number</MenuItem>\n          <MenuItem value=\"name\">Name</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n        <InputLabel id=\"filter-label\">Filter by Type</InputLabel>\n        <Select\n          labelId=\"filter-label\"\n          value={typeFilter}\n          onChange={e => setTypeFilter(e.target.value)}\n          label=\"Filter by Type\"\n          inputProps={{ 'aria-label': 'filter-by-type' }}\n        >\n          <MenuItem value=\"\">All</MenuItem>\n          <MenuItem value=\"Grass\">Grass</MenuItem>\n          <MenuItem value=\"Poison\">Poison</MenuItem>\n          <MenuItem value=\"Fire\">Fire</MenuItem>\n          <MenuItem value=\"Water\">Water</MenuItem>\n          {/* Add more types as needed */}\n        </Select>\n      </FormControl>\n      <Grid container spacing={3}>\n        {paginatedPokemons.map(pokemon => (\n          <Grid item xs={12} sm={6} md={4} lg={3} key={pokemon.id}>\n            <motion.div whileHover={{ scale: 1.1 }} onClick={() => handleOpen(pokemon)} tabIndex={0} role=\"button\" aria-label={`View details of ${pokemon.name}`}>\n              <Card>\n                <CardMedia\n                  component=\"img\"\n                  alt={pokemon.name}\n                  height=\"140\"\n                  image={pokemon.image}\n                  title={pokemon.name}\n                  loading=\"lazy\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {pokemon.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    #{pokemon.number}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </Grid>\n        ))}\n      </Grid>\n      <Pagination\n        count={Math.ceil(filteredPokemons.length / itemsPerPage)}\n        page={page}\n        onChange={(event, value) => setPage(value)}\n        aria-label=\"pagination\"\n      />\n      {selectedPokemon && (\n        <Modal\n          open={!!selectedPokemon}\n          onClose={handleClose}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 500,\n          }}\n          aria-labelledby=\"pokemon-modal-title\"\n          aria-describedby=\"pokemon-modal-description\"\n        >\n          <Fade in={!!selectedPokemon}>\n            <div className=\"modal-content\">\n              <Typography id=\"pokemon-modal-title\" variant=\"h4\" gutterBottom>{selectedPokemon.name}</Typography>\n              <Typography id=\"pokemon-modal-description\" variant=\"body1\">Number: {selectedPokemon.number}</Typography>\n              <Typography variant=\"body1\">Classification: {selectedPokemon.classification}</Typography>\n              <Typography variant=\"body1\">Types: {selectedPokemon.types.join(', ')}</Typography>\n              <img src={selectedPokemon.image} alt={selectedPokemon.name} />\n            </div>\n          </Fade>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Container, CssBaseline } from '@material-ui/core';\nimport Dashboard from './components/Dashboard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/content-management-dashboard\">\n      <CssBaseline />\n      <Container>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/\" exact component={Dashboard} />\n          </Switch>\n        </div>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport { ApolloProvider, InMemoryCache, ApolloClient } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon2.vercel.app/',\n  cache: new InMemoryCache(),\n});\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js').then(registration => {\n      console.log('SW registered: ', registration);\n    }).catch(registrationError => {\n      console.log('SW registration failed: ', registrationError);\n    });\n  });\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}