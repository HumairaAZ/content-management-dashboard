{"version":3,"sources":["components/Dashboard.js","App.js","index.js"],"names":["GET_POKEMONS","gql","_templateObject","_taggedTemplateLiteral","LazyModal","React","lazy","Dashboard","loading","error","data","useQuery","searchTerm","setSearchTerm","useState","sortType","setSortType","typeFilter","setTypeFilter","page","setPage","selectedPokemon","setSelectedPokemon","_jsxs","className","children","_jsx","Typography","variant","gutterBottom","Grid","container","spacing","Array","from","map","_","index","item","xs","sm","md","lg","Card","Skeleton","width","height","CardContent","color","filteredPokemons","pokemons","filter","pokemon","name","toLowerCase","includes","types","sort","a","b","localeCompare","number","length","paginatedPokemons","slice","TextField","label","fullWidth","margin","onChange","e","target","value","inputProps","FormControl","InputLabel","id","Select","labelId","MenuItem","motion","div","whileHover","scale","onClick","handleOpen","tabIndex","role","concat","CardMedia","component","alt","image","title","Pagination","count","Math","ceil","event","Suspense","fallback","handleClose","App","Router","basename","CssBaseline","Container","Switch","Route","path","exact","client","ApolloClient","uri","cache","InMemoryCache","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","catch","registrationError","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8da4b272.chunk.js","sourcesContent":["import React, { useState, Suspense } from 'react';\nimport './Dashboard.css';\nimport { useQuery, gql } from '@apollo/client';\nimport { TextField, Grid, Card, CardContent, Typography, CardMedia, Select, MenuItem, InputLabel, FormControl } from '@material-ui/core';\nimport { Pagination, Skeleton } from '@material-ui/lab';\nimport { motion } from 'framer-motion';\n\nconst GET_POKEMONS = gql`\n  {\n    pokemons(first: 151) {\n      id\n      number\n      name\n      image\n      classification\n      types\n    }\n  }\n`;\n\nconst LazyModal = React.lazy(() => import('./ModalComponent'));\n\nfunction Dashboard() {\n  const { loading, error, data } = useQuery(GET_POKEMONS);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortType, setSortType] = useState('number');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [page, setPage] = useState(1);\n  const [selectedPokemon, setSelectedPokemon] = useState(null);\n  const itemsPerPage = 20;\n\n  const handleOpen = (pokemon) => {\n    setSelectedPokemon(pokemon);\n  };\n\n  const handleClose = () => {\n    setSelectedPokemon(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"dashboard\">\n        <Typography variant=\"h4\" gutterBottom>Loading Pokémon...</Typography>\n        <Grid container spacing={3}>\n          {Array.from(new Array(itemsPerPage)).map((_, index) => (\n            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n              <Card>\n                <Skeleton variant=\"rect\" width=\"100%\" height={140} />\n                <CardContent>\n                  <Skeleton variant=\"text\" width=\"60%\" />\n                  <Skeleton variant=\"text\" width=\"40%\" />\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"dashboard\">\n        <Typography variant=\"h6\" color=\"error\">Failed to load Pokémon data. Please try again later.</Typography>\n      </div>\n    );\n  }\n\n  const filteredPokemons = data.pokemons\n    .filter(pokemon => pokemon.name.toLowerCase().includes(searchTerm.toLowerCase()) && (!typeFilter || pokemon.types.includes(typeFilter)))\n    .sort((a, b) => {\n      if (sortType === 'name') {\n        return a.name.localeCompare(b.name);\n      }\n      return a.number - b.number;\n    });\n\n  if (filteredPokemons.length === 0) {\n    return (\n      <div className=\"dashboard\">\n        <Typography variant=\"h6\">No Pokémon found</Typography>\n      </div>\n    );\n  }\n\n  const paginatedPokemons = filteredPokemons.slice((page - 1) * itemsPerPage, page * itemsPerPage);\n\n  return (\n    <div className=\"dashboard\">\n      <Typography variant=\"h4\" gutterBottom>Content Management Dashboard</Typography>\n      <TextField\n        label=\"Search Pokémon\"\n        variant=\"outlined\"\n        fullWidth\n        margin=\"normal\"\n        onChange={e => setSearchTerm(e.target.value)}\n        inputProps={{ 'aria-label': 'search-pokemon' }}\n      />\n      <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n        <InputLabel id=\"sort-label\">Sort By</InputLabel>\n        <Select\n          labelId=\"sort-label\"\n          value={sortType}\n          onChange={e => setSortType(e.target.value)}\n          label=\"Sort By\"\n          inputProps={{ 'aria-label': 'sort-by' }}\n        >\n          <MenuItem value=\"number\">Number</MenuItem>\n          <MenuItem value=\"name\">Name</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n        <InputLabel id=\"filter-label\">Filter by Type</InputLabel>\n        <Select\n          labelId=\"filter-label\"\n          value={typeFilter}\n          onChange={e => setTypeFilter(e.target.value)}\n          label=\"Filter by Type\"\n          inputProps={{ 'aria-label': 'filter-by-type' }}\n        >\n          <MenuItem value=\"\">All</MenuItem>\n          <MenuItem value=\"Grass\">Grass</MenuItem>\n          <MenuItem value=\"Poison\">Poison</MenuItem>\n          <MenuItem value=\"Fire\">Fire</MenuItem>\n          <MenuItem value=\"Water\">Water</MenuItem>\n          {/* Add more types as needed */}\n        </Select>\n      </FormControl>\n      <Grid container spacing={3}>\n        {paginatedPokemons.map(pokemon => (\n          <Grid item xs={12} sm={6} md={4} lg={3} key={pokemon.id}>\n            <motion.div whileHover={{ scale: 1.1 }} onClick={() => handleOpen(pokemon)} tabIndex={0} role=\"button\" aria-label={`View details of ${pokemon.name}`}>\n              <Card>\n                <CardMedia\n                  component=\"img\"\n                  alt={pokemon.name}\n                  height=\"140\"\n                  image={pokemon.image}\n                  title={pokemon.name}\n                  loading=\"lazy\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {pokemon.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    #{pokemon.number}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </Grid>\n        ))}\n      </Grid>\n      <Pagination\n        count={Math.ceil(filteredPokemons.length / itemsPerPage)}\n        page={page}\n        onChange={(event, value) => setPage(value)}\n        aria-label=\"pagination\"\n      />\n      <Suspense fallback={<div>Loading...</div>}>\n        {selectedPokemon && (\n          <LazyModal\n            pokemon={selectedPokemon}\n            handleClose={handleClose}\n          />\n        )}\n      </Suspense>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Container, CssBaseline } from '@material-ui/core';\nimport Dashboard from './components/Dashboard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/content-management-dashboard\">\n      <CssBaseline />\n      <Container>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/\" exact component={Dashboard} />\n          </Switch>\n        </div>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport { ApolloProvider, InMemoryCache, ApolloClient } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon2.vercel.app/',\n  cache: new InMemoryCache(),\n});\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/service-worker.js').then(registration => {\n      console.log('SW registered: ', registration);\n    }).catch(registrationError => {\n      console.log('SW registration failed: ', registrationError);\n    });\n  });\n}\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}