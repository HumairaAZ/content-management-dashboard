{"version":3,"sources":["components/Dashboard.js","App.js","index.js"],"names":["GET_POKEMONS","gql","_templateObject","_taggedTemplateLiteral","Dashboard","loading","error","data","useQuery","searchTerm","setSearchTerm","useState","sortType","setSortType","page","setPage","selectedPokemon","setSelectedPokemon","_jsx","CircularProgress","children","filteredPokemons","pokemons","filter","pokemon","name","toLowerCase","includes","sort","a","b","localeCompare","number","paginatedPokemons","slice","_jsxs","className","Typography","variant","gutterBottom","TextField","label","fullWidth","margin","onChange","e","target","value","FormControl","InputLabel","Select","MenuItem","Grid","container","spacing","map","item","xs","sm","md","lg","motion","div","whileHover","scale","Card","onClick","handleOpen","CardMedia","component","alt","height","image","title","CardContent","color","id","Pagination","count","Math","ceil","length","event","Modal","open","onClose","handleClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","classification","types","join","src","App","Router","basename","CssBaseline","Container","Switch","Route","path","exact","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3217e07.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Dashboard.css';\nimport { useQuery, gql } from '@apollo/client';\nimport { TextField, Grid, Card, CardContent, Typography, CardMedia, CircularProgress, Select, MenuItem, InputLabel, FormControl, Modal, Backdrop, Fade } from '@material-ui/core';\nimport { Pagination } from '@material-ui/lab';\nimport { motion } from 'framer-motion';\n\nconst GET_POKEMONS = gql`\n  {\n    pokemons(first: 151) {\n      id\n      number\n      name\n      image\n      classification\n      types\n    }\n  }\n`;\n\nfunction Dashboard() {\n  const { loading, error, data } = useQuery(GET_POKEMONS);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortType, setSortType] = useState('number');\n  const [page, setPage] = useState(1);\n  const [selectedPokemon, setSelectedPokemon] = useState(null);\n  const itemsPerPage = 20;\n\n  if (loading) return <CircularProgress />;\n  if (error) return <p>Error :(</p>;\n\n  const filteredPokemons = data.pokemons\n    .filter(pokemon => pokemon.name.toLowerCase().includes(searchTerm.toLowerCase()))\n    .sort((a, b) => {\n      if (sortType === 'name') {\n        return a.name.localeCompare(b.name);\n      }\n      return a.number - b.number;\n    });\n\n  const paginatedPokemons = filteredPokemons.slice((page - 1) * itemsPerPage, page * itemsPerPage);\n\n  const handleOpen = (pokemon) => {\n    setSelectedPokemon(pokemon);\n  };\n\n  const handleClose = () => {\n    setSelectedPokemon(null);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <Typography variant=\"h4\" gutterBottom>Content Management Dashboard</Typography>\n      <TextField\n        label=\"Search PokÃ©mon\"\n        variant=\"outlined\"\n        fullWidth\n        margin=\"normal\"\n        onChange={e => setSearchTerm(e.target.value)}\n      />\n      <FormControl variant=\"outlined\" fullWidth margin=\"normal\">\n        <InputLabel>Sort By</InputLabel>\n        <Select\n          value={sortType}\n          onChange={e => setSortType(e.target.value)}\n          label=\"Sort By\"\n        >\n          <MenuItem value=\"number\">Number</MenuItem>\n          <MenuItem value=\"name\">Name</MenuItem>\n        </Select>\n      </FormControl>\n      <Grid container spacing={3}>\n        {paginatedPokemons.map(pokemon => (\n          <Grid item xs={12} sm={6} md={4} lg={3} key={pokemon.id}>\n            <motion.div whileHover={{ scale: 1.1 }}>\n              <Card onClick={() => handleOpen(pokemon)}>\n                <CardMedia\n                  component=\"img\"\n                  alt={pokemon.name}\n                  height=\"140\"\n                  image={pokemon.image}\n                  title={pokemon.name}\n                  loading=\"lazy\"\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {pokemon.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    #{pokemon.number}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </Grid>\n        ))}\n      </Grid>\n      <Pagination\n        count={Math.ceil(filteredPokemons.length / itemsPerPage)}\n        page={page}\n        onChange={(event, value) => setPage(value)}\n      />\n      {selectedPokemon && (\n        <Modal\n          open={!!selectedPokemon}\n          onClose={handleClose}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 500,\n          }}\n        >\n          <Fade in={!!selectedPokemon}>\n            <div className=\"modal-content\">\n              <Typography variant=\"h4\" gutterBottom>{selectedPokemon.name}</Typography>\n              <Typography variant=\"body1\">Number: {selectedPokemon.number}</Typography>\n              <Typography variant=\"body1\">Classification: {selectedPokemon.classification}</Typography>\n              <Typography variant=\"body1\">Types: {selectedPokemon.types.join(', ')}</Typography>\n              <img src={selectedPokemon.image} alt={selectedPokemon.name} />\n            </div>\n          </Fade>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Container, CssBaseline } from '@material-ui/core';\nimport Dashboard from './components/Dashboard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename=\"/content-management-dashboard\">\n      <CssBaseline />\n      <Container>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/\" exact component={Dashboard} />\n          </Switch>\n        </div>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport { ApolloProvider, InMemoryCache, ApolloClient } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon2.vercel.app/',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}